name: Build

on:
  push:
  workflow_dispatch:
    inputs:
      release_tag:
        description: '发布标签'
        required: true
        type: string
      primary_version:
        description: '主发布版本'
        required: true
        type: string
      channels:
        description: '发布通道'
        required: true
        type: string
      is_test_mode:
        description: '是否处于测试发布模式'
        required: false
        type: boolean

jobs:
  build_app:
    runs-on: windows-latest  # For a list of available runner types, refer to
    # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    env:
      artifact_name: out_app_windows_${{ matrix.arch }}_${{ matrix.trim_assets == 'true' && 'trimmed' || 'full' }}_${{ matrix.package }}
      isTestMode: ${{ github.event.inputs.is_test_mode }}
      arch: ${{ matrix.arch }}
    strategy:
      matrix:
        trim_assets: ['false']
        package: ['singleFile']
        arch: ['x64', 'x86', 'arm64']
        include:
          - arch: 'x64' 
            trim_assets: 'true'
            package: 'singleFile'
    name: Build_windows_${{ matrix.arch }}_${{ matrix.trim_assets == 'true' && 'trimmed' || 'full' }}_${{ matrix.package }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
          ref: ${{ github.event_name != 'workflow_dispatch' && github.ref || github.event.inputs.release_tag }} 
      
      - name: List files
        run: ls
      
      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x
      
      # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2
      
      - name: Build application
        env:
          trim_assets: ${{ matrix.trim_assets }}
          package: ${{ matrix.package }}
          is_release: ${{ startsWith(github.ref, 'refs/tags/') }}
          test_signing_key: ${{ secrets.TEST_SIGNING_KEY }}
          API_SIGNING_KEY: ${{ secrets.API_SIGNING_KEY}}
          API_SIGNING_KEY_PS: ${{ secrets.API_SIGNING_KEY_PS }}
        run: |
          ls
          if ($env:package -eq "wap") {  
            # WAP
            pwsh -ep Bypass -c ./tools/release-gen/publish-wap.ps1 false $env:is_release
          } else {  
            # Single File
            pwsh -ep Bypass -c ./tools/release-gen/publish.ps1 $env:trim_assets $env:arch
          }

      - name: Upload Unsigned APP to artifacts
        id: upload-unsigned-artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact_name }}
          path: |
            ./out/*.zip
            ./out/*.appx
          
  build_nupkg:
    runs-on: windows-latest  # For a list of available runner types, refer to
    # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    env:
      Solution_Name: ClassIsland.sln                       # Replace with your solution name, i.e. MyWpfApp.sln.
      # Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: ClassIsland/ClassIsland    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: ClassIsland/ClassIsland/ClassIsland.csproj                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.
    name: Build Nuget Packages
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
          ref: ${{ github.event_name != 'workflow_dispatch' && github.ref || github.event.inputs.release_tag }} 

      - name: List files
        run: ls

      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2
        
      - name: Build Nuget packages
        env:
          is_release: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
          ls
          pwsh -ep Bypass -c ./tools/release-gen/publish-nupkg.ps1 $env:is_release
      
      - name: Upload Nuget packages to GitHub registry
        if: ${{ github.event_name != 'pull_request' }} 
        env:
          GHPKG_KEY: ${{ secrets.GHPKG_KEY }}
        run: |
          dotnet nuget add source --username HelloWRC --password $env:GHPKG_KEY --store-password-in-clear-text --name github "https://nuget.pkg.github.com/ClassIsland/index.json"
          dotnet nuget push .\out\*.nupkg -k $env:GHPKG_KEY --source "github" --skip-duplicate

      - name: Upload Nuget Packages to artifacts
        if: ${{ !matrix.trim_assets }}
        uses: actions/upload-artifact@v4
        with:
          name: out_nupkgs
          path: ./out/*.nupkg

  publish:
    runs-on: windows-latest
    env:
      isTestMode: ${{ github.event.inputs.is_test_mode == true }}
    if: ${{ github.event.inputs.release_tag && github.event_name != 'pull_request' }}
    needs: [ build_app, build_nupkg ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
          ref: ${{ github.event_name != 'workflow_dispatch' && github.ref || github.event.inputs.release_tag }} 

      - name: Get commit hash
        uses: prompt/actions-commit-hash@v3
        id: commit
        with:
          prefix: "${{ github.event.inputs.release_tag }}+"
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./out_artifacts

      - name: Create Sign Bundle
        run: |
          pwsh -ep Bypass -c ./tools/release-gen/create-sign-bundle.ps1

      - name: Upload Sign Bundle to artifacts
        id: upload-sign-bundle
        uses: actions/upload-artifact@v4
        with:
          name: sign-bundle
          path: ./ci_tmp/sign_bundle/*

      - name: Sign Application
        uses: signpath/github-action-submit-signing-request@v1
        with:
          api-token: '${{ secrets.SIGNPATH_TOKEN }}'
          organization-id: '74962648-db7a-4a10-bfdd-0637542e39df'
          project-slug: 'ClassIsland'
          artifact-configuration-slug: 'sign_bundle'
          signing-policy-slug: release-signing
          github-artifact-id: '${{ steps.upload-sign-bundle.outputs.artifact-id }}'
          wait-for-completion: true
          output-artifact-directory: '/out_signed'
          parameters: |
            version: ${{ toJSON(steps.commit.outputs.long) }}

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.METADATA_DEPLOY_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Upload APP
        env:
          GHAPP_PRIVATE_KEY: ${{ secrets.GHAPP_PRIVATE_KEY }}
          GHAPP_ID: 998668
          GHAPP_INSTALLATION_ID: 54893567
          ALIST_HOST: ${{ secrets.ALIST_HOST }}
          ALIST_KEY: ${{ secrets.ALIST_KEY }}
          primaryVersion: ${{ github.event.inputs.primary_version }}
          channels: ${{ github.event.inputs.channels }}
        run: |
          pwsh -ep Bypass -c ./tools/release-gen/login-github.ps1
          pwsh -ep Bypass -c ./tools/release-gen/upload.ps1
          
      # - name: Sentry Release
      #   uses: getsentry/action-release@v1.7.0
      #   env:
      #     SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      #     SENTRY_ORG: classisland
      #     SENTRY_PROJECT: classisland
      #     SENTRY_URL: ${{ vars.SENTRY_URL }}
      #   with:
      #     environment: production
      
      - name: Upload APP to release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "./out/*.zip,./out/*.appx"
          draft: true
          bodyFile: ./out/ChangeLogs.md
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.event_name != 'workflow_dispatch' && github.ref || github.event.inputs.release_tag }} 
      - name: Upload Nuget packages to NuGet Gallery
        if: ${{ github.event_name != 'pull_request' }}
        env:
          NUGET_KEY: ${{ secrets.NUGET_KEY }}
        run: |
          ls
          cd out
          dotnet nuget push *.nupkg -k $env:NUGET_KEY -s https://api.nuget.org/v3/index.json --skip-duplicate
          
      - name: Upload to AppCenter
        env:
          APPCENTER_TOKEN: ${{ secrets.APPCENTER_TOKEN }}
        run: |
          $env:app_ver = (git describe --abbrev=0 --tags)
          Write-Host "Uploading to AppCenter..." -ForegroundColor Cyan
          pwsh -ep Bypass -c .\tools\release-gen\pre-appcenter-upload.ps1
          pwsh -ep Bypass -c .\tools\release-gen\appcenter-upload.ps1 $env:APPCENTER_TOKEN $env:app_ver


